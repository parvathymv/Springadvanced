NOSQL
-----
NoSQL databases use a variety of data models for accessing and managing data. These types of databases are optimized specifically for applications that require flexible data models, large data volume, and low latency, which are achieved by relaxing some of the data consistency restrictions of relational databases.

Types of NoSQL databases
Key-value pair.
Document-oriented.
Column-oriented.
Graph-based.
Time series.

Document Database
A record in MongoDB is a document, which is a data structure composed of field and value pairs. MongoDB documents are similar to JSON objects. The values of fields may include other documents, arrays, and arrays of documents.

{
	title: "Post Title 1",
	body: "Body of post.",
	category: "News",
	likes: 1,
	tags: ["news", "events"],
	date: Date()
}
MongoDB stores documents in collections. Collections are analogous to tables in relational databases.
MongoDB works on concept of collection and document.

Database
Database is a physical container for collections. Each database gets its own set of files on the file system. A single MongoDB server typically has multiple databases.

Collection
Collection is a group of MongoDB documents. It is the equivalent of an RDBMS table. A collection exists within a single database. Collections do not enforce a schema. Documents within a collection can have different fields. Typically, all documents in a collection are of similar or related purpose.

Document
A document is a set of key-value pairs. Documents have dynamic schema. Dynamic schema means that documents in the same collection do not need to have the same set of fields or structure, and common fields in a collection's documents may hold different types of data.

_id is a 12 bytes hexadecimal number which assures the uniqueness of every document. You can provide _id while inserting the document. If you don’t provide then MongoDB provides a unique id for every document. These 12 bytes first 4 bytes for the current timestamp, next 3 bytes for machine id, next 2 bytes for process id of MongoDB server and remaining 3 bytes are simple incremental VALUE.


Embedded Data Model
In this model, you can have (embed) all the related data in a single document, it is also known as de-normalized data model.

For example, assume we are getting the details of employees in three different documents namely, Personal_details, Contact and, Address, you can embed all the three documents in a single one as shown below −

{
	_id: ,
	Emp_ID: "10025AE336"
	Personal_details:{
		First_Name: "Radhika",
		Last_Name: "Sharma",
		Date_Of_Birth: "1995-09-26"
	},
	Contact: {
		e-mail: "radhika_sharma.123@gmail.com",
		phone: "9848022338"
	},
	Address: {
		city: "Hyderabad",
		Area: "Madapur",
		State: "Telangana"
	}
}
Normalized Data Model
In this model, you can refer the sub documents in the original document, using references. For example, you can re-write the above document in the normalized model as:

Employee:

{
	_id: <ObjectId101>,
	Emp_ID: "10025AE336"
}
Personal_details:

{
	_id: <ObjectId102>,
	empDocID: " ObjectId101",
	First_Name: "Radhika",
	Last_Name: "Sharma",
	Date_Of_Birth: "1995-09-26"
}
Contact:

{
	_id: <ObjectId103>,
	empDocID: " ObjectId101",
	e-mail: "radhika_sharma.123@gmail.com",
	phone: "9848022338"
}
Address:

{
	_id: <ObjectId104>,
	empDocID: " ObjectId101",
	city: "Hyderabad",
	Area: "Madapur",
	State: "Telangana"
}
Considerations while designing Schema in MongoDB
Design your schema according to user requirements.

Combine objects into one document if you will use them together. Otherwise separate them (but make sure there should not be need of joins).

Duplicate the data (but limited) because disk space is cheap as compare to compute time.

Do joins while write, not on read.

Optimize your schema for most frequent use cases.

Do complex aggregation in the schema.

1) set path to mongodb
2) mongosh
3) mongod --version
4) use database mydatbase
5) show dbs
Create
------
db.users.insertOne({ name: "John", age: 30 })
db.users.find()
db.users.insertMany([
  { name: "Bob", age: 30 },
  { name: "Charlie", age: 35 }
])
Read
----
db.myCollection.find()
Use a query object to match documents
-------------------------------------
db.users.find({ age: { $gte: 30 } }) // Find documents where age >= 30

Retrieve a Single Document:
---------------------------
db.users.findOne({ name: "Alice" })

Use Projections to Limit Fields:
--------------------------------
db.users.find({ age: { $gte: 30 } }, { name: 1, _id: 0 })
// Retrieves only the `name` field, excludes `_id`
UPDATE (Modify Documents)
To modify existing documents, use updateOne, updateMany, or replaceOne.

Update a Single Document:
------------------------
db.users.updateOne(
  { name: "John" },                  
  { $set: { age: 36 } }        
)
Update Multiple Documents:
--------------------------
db.users.updateMany(
  { age: { $gte: 30 } },              // Filter
  { $set: { status: "Not-active" } }      // Update
)
Replace a Document:
-------------------
Completely replaces the document (removing fields not in the replacement).

db.myCollection.replaceOne(
  { name: "Bob" },                  // Filter
  { name: "Bob", age: 27 }          // Replacement
)

DELETE (Remove Documents)
------
To delete documents, use deleteOne or deleteMany.

Delete a Single Document:
-------------------------
db.myCollection.deleteOne({ name: "Alice" })

Delete Multiple Documents:
--------------------------
db.myCollection.deleteMany({ age: { $lt: 30 } })
// Deletes documents where age < 30
Drop an Entire Collection:
-------------------------
db.myCollection.drop()


1. Structure of an Aggregation Pipeline
The pipeline is defined as an array of stages:

db.collectionName.aggregate([
  { stage1 }, 
  { stage2 }, 
  { stage3 }
])
Each stage is a document that specifies an operation.

Common Stages
-------------

$match - Filter Documents
Filters documents based on a condition (similar to find):


{ $match: { age: { $gte: 30 } } }

$project - Shape the Output
Specifies which fields to include or compute:


{ $project: { name: 1, age: 1, isAdult: { $gte: ["$age", 18] } } }

$group - Group and Aggregate
Groups documents by a field and applies aggregation operations:


{ 
  $group: { 
    _id: "$city", 
    totalUsers: { $sum: 1 }, 
    averageAge: { $avg: "$age" } 
  } 
}

$sort - Sort Results
Sorts documents by a field:


{ $sort: { age: -1 } } // Descending

$limit - Limit Results
Limits the number of documents in the output:


{ $limit: 5 }


$skip - Skip Documents
Skips the first N documents:


{ $skip: 10 }



db.posts.insertMany([  
  {
    title: "Post Title 2",
    body: "Body of post.",
    category: "Event",
    likes: 2,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 3",
    body: "Body of post.",
    category: "Technology",
    likes: 3,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 4",
    body: "Body of post.",
    category: "Event",
    likes: 4,
    tags: ["news", "events"],
    date: Date()
  }
])

db.posts.find({}, {category: 0})

db.posts.aggregate([
  // Stage 1: Only find documents that have more than 1 like
  {
    $match: { likes: { $gt: 1 } }
  },
  // Stage 2: Group documents by category and sum each categories likes
  {
    $group: { _id: "$category", totalLikes: { $sum: "$likes" } }
  }
])

db.movies.aggregate([ { $limit: 1 } ])